/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server_classes;

/**
 *
 * @author sumit
 */
public class ServerMonitor extends javax.swing.JFrame {

    /**
     * Creates new form ServerMonitor
     */
    int currentRequest = 0;
    int totalRequests = 0;

    public ServerMonitor() {
        initComponents();
    }

    public void setServerName(String name) {
        serverName.setText(name);
    }

    public void setIPAddressPort(String IP, int port) {
        ipAddress.setText(IP);
        this.port.setText("" + port);
    }

    public void updateCacheCapacity(int filled, int total) {
        cacheCapacity.setText(filled + " / " + total);
    }

    public void newRequest() {
        currentRequest++;
        totalRequests++;
        currentRequests.setText("" + currentRequest);
        updateTotalRequests();
    }

    public void requestHandled() {
        currentRequest--;
        currentRequests.setText("" + currentRequest);
    }

    public void updateTotalRequests() {
        totalRequestsServed.setText("" + totalRequests);
    }

    public int getLoad(){
        return currentRequest;
    }
    public void updateServerLoads(ServerLoad[] serverLoads) {
        String result = "";
        for (int i = 0; i < serverLoads.length; i++) {
            result += serverLoads[i].load + " || ";
        }
        serverLoadsField.setText(result);
        normalThresholdField.setText(ServerLoad.getNormalThreshold(serverLoads) + "");
        overloadThresholdField.setText(ServerLoad.getOverloadThreshold(serverLoads) + "");
    }

    /*
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serverMonitorLabel = new javax.swing.JLabel();
        currentRequestsLabel = new javax.swing.JLabel();
        cacheCapacityLabel = new javax.swing.JLabel();
        cacheCapacity = new javax.swing.JLabel();
        currentRequests = new javax.swing.JLabel();
        totalRequestsServedLabel = new javax.swing.JLabel();
        totalRequestsServed = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        port = new javax.swing.JLabel();
        ipAddressLabel = new javax.swing.JLabel();
        ipAddress = new javax.swing.JLabel();
        serverName = new javax.swing.JLabel();
        serverLoadsLabel = new javax.swing.JLabel();
        serverLoadsField = new javax.swing.JLabel();
        normalThresholdLabel = new javax.swing.JLabel();
        normalThresholdField = new javax.swing.JLabel();
        OverloadThresholdLabel = new javax.swing.JLabel();
        overloadThresholdField = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        serverMonitorLabel.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        serverMonitorLabel.setText("Server Monitor");
        serverMonitorLabel.setName(""); // NOI18N

        currentRequestsLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        currentRequestsLabel.setText("No of current requests");

        cacheCapacityLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        cacheCapacityLabel.setText("Cache Capacity");

        cacheCapacity.setText("0 / 0");

        currentRequests.setText("0");

        totalRequestsServedLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        totalRequestsServedLabel.setText("Total Requests Served");

        totalRequestsServed.setText("----");

        portLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        portLabel.setText("Port");

        port.setText("----");

        ipAddressLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        ipAddressLabel.setText("IP Address");

        ipAddress.setText("---.---.---.---");

        serverName.setText("----");

        serverLoadsLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        serverLoadsLabel.setText("Server Loads");

        serverLoadsField.setText("----");

        normalThresholdLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        normalThresholdLabel.setText("Normal Threshold");

        normalThresholdField.setText("----");

        OverloadThresholdLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        OverloadThresholdLabel.setText("Overload Threshold");

        overloadThresholdField.setText("----");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cacheCapacityLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cacheCapacity))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(totalRequestsServedLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
                        .addComponent(totalRequestsServed))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(currentRequestsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(currentRequests))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(portLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(port))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(serverMonitorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(serverName))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ipAddressLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ipAddress))
                    .addComponent(serverLoadsField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(OverloadThresholdLabel)
                        .addGap(18, 18, 18)
                        .addComponent(overloadThresholdField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(serverLoadsLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(normalThresholdLabel)
                        .addGap(34, 34, 34)
                        .addComponent(normalThresholdField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverMonitorLabel)
                    .addComponent(serverName))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cacheCapacityLabel)
                    .addComponent(cacheCapacity))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentRequestsLabel)
                    .addComponent(currentRequests))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(serverLoadsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(serverLoadsField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(normalThresholdLabel)
                    .addComponent(normalThresholdField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OverloadThresholdLabel)
                    .addComponent(overloadThresholdField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ipAddressLabel)
                    .addComponent(ipAddress))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portLabel)
                    .addComponent(port))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalRequestsServedLabel)
                    .addComponent(totalRequestsServed))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerMonitor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel OverloadThresholdLabel;
    private javax.swing.JLabel cacheCapacity;
    private javax.swing.JLabel cacheCapacityLabel;
    private javax.swing.JLabel currentRequests;
    private javax.swing.JLabel currentRequestsLabel;
    private javax.swing.JLabel ipAddress;
    private javax.swing.JLabel ipAddressLabel;
    private javax.swing.JLabel normalThresholdField;
    private javax.swing.JLabel normalThresholdLabel;
    private javax.swing.JLabel overloadThresholdField;
    private javax.swing.JLabel port;
    private javax.swing.JLabel portLabel;
    private javax.swing.JLabel serverLoadsField;
    private javax.swing.JLabel serverLoadsLabel;
    private javax.swing.JLabel serverMonitorLabel;
    private javax.swing.JLabel serverName;
    private javax.swing.JLabel totalRequestsServed;
    private javax.swing.JLabel totalRequestsServedLabel;
    // End of variables declaration//GEN-END:variables
}
